// Generated by CoffeeScript 1.4.0
(function() {
  var Rdio, pages, sockets;

  Rdio = require('node-rdio');

  sockets = require('hubot.io');

  pages = require('./pages');

  module.exports = function(robot) {
    var CALLBACK, HEROKU_URL, RDIO_CONSUMER, RDIO_SECRET, io, _ref;
    io = sockets(robot);
    _ref = process.env, RDIO_CONSUMER = _ref.RDIO_CONSUMER, RDIO_SECRET = _ref.RDIO_SECRET, HEROKU_URL = _ref.HEROKU_URL;
    if (!(RDIO_CONSUMER && RDIO_SECRET)) {
      throw new Error('Invalid rdio credentials');
    }
    CALLBACK = 'auth';
    robot.respond(/init rdio/i, function(msg) {
      var rdio;
      rdio = new Rdio([RDIO_CONSUMER, RDIO_SECRET]);
      return rdio.beginAuthentication(HEROKU_URL + CALLBACK, function(error, authUrl) {
        var requestSecret, requestToken;
        if (error) {
          robot.logger.debug(error);
          return msg.send("Error: " + error);
        }
        requestToken = rdio.token[0];
        requestSecret = rdio.token[1];
        robot.brain.set('RdioRequestToken', requestToken).set("RdioRequestSecret-" + requestToken, requestSecret).save();
        return msg.send("Go to " + authUrl + " to verify your rdio account.");
      });
    });
    robot.router.get("/" + CALLBACK, function(req, res) {
      var rdio, requestSecret, requestToken, verifier;
      res.writeHead(200, {
        'Content-Type': 'text/html'
      });
      requestToken = req.query['oauth_token'];
      requestSecret = robot.brain.get("RdioRequestSecret-" + requestToken);
      verifier = req.query['oauth_verifier'];
      if (!(requestToken && requestSecret && verifier)) {
        return res.end(pages.error({
          message: 'Error: Invalid request token'
        }));
      }
      rdio = new Rdio([RDIO_CONSUMER, RDIO_SECRET], [requestToken, requestSecret]);
      return rdio.completeAuthentication(verifier, function(error) {
        var accessSecret, accessToken;
        if (error) {
          robot.logger.debug(error);
          return msg.send("Error: " + error);
        }
        accessToken = rdio.token[0];
        accessSecret = rdio.token[1];
        robot.brain.remove('RdioAccessToken').remove("RdioRequestSecret-" + requestToken).set('RdioAccessToken', accessToken).set("RdioAccessSecret-" + accessToken, accessSecret).save();
        return res.end(pages.home({
          title: "Yay! Your access token is " + accessToken
        }));
      });
    });
    robot.router.get('/', function(req, res) {
      res.writeHead(200, {
        'Content-Type': 'text/html'
      });
      return res.end(pages.home({
        title: 'Pataku?'
      }));
    });
    return robot.respond(/test rdio/i, function(msg) {
      var accessSecret, accessToken, rdio;
      accessToken = robot.brain.get('RdioAccessToken');
      accessSecret = robot.brain.get("RdioAccessSecret-" + accessToken);
      if (!accessToken && accessSecret) {
        return msg.send('Please login to your rdio account first.');
      }
      rdio = new Rdio([RDIO_CONSUMER, RDIO_SECRET], [accessToken, accessSecret]);
      return rdio.call('currentUser', function(error, data) {
        if (error) {
          robot.logger.warn("Error: " + error);
          return msg.send("Error: " + error);
        }
        return msg.send("Success: " + data);
      });
    });
  };

}).call(this);
