// Generated by CoffeeScript 1.4.0
(function() {
  var CALLBACK, DOMAIN, RDIO_CONSUMER, RDIO_SECRET, Rdio, listeners, _ref;

  Rdio = require('node-rdio');

  _ref = require('./globals'), RDIO_CONSUMER = _ref.RDIO_CONSUMER, RDIO_SECRET = _ref.RDIO_SECRET, DOMAIN = _ref.DOMAIN, CALLBACK = _ref.CALLBACK;

  module.exports = listeners = function(robot) {
    var getRdio;
    getRdio = function() {
      var accessSecret, accessToken, rdio;
      accessToken = robot.brain.get('RdioAccessToken');
      accessSecret = robot.brain.get("RdioAccessSecret-" + accessToken);
      if (!accessToken && accessSecret) {
        return msg.send('Please login to your rdio account first.');
      }
      rdio = new Rdio([RDIO_CONSUMER, RDIO_SECRET], [accessToken, accessSecret]);
      return rdio;
    };
    return {
      init: function(msg) {
        var rdio;
        rdio = new Rdio([RDIO_CONSUMER, RDIO_SECRET]);
        return rdio.beginAuthentication(DOMAIN + CALLBACK, function(error, authUrl) {
          var requestSecret, requestToken;
          if (error) {
            robot.logger.debug(error);
            return msg.send("Error: " + error);
          }
          requestToken = rdio.token[0];
          requestSecret = rdio.token[1];
          robot.brain.set('RdioRequestToken', requestToken).set("RdioRequestSecret-" + requestToken, requestSecret).save();
          return msg.send("Go to " + authUrl + " to verify your rdio account.");
        });
      },
      test: function(msg) {
        var rdio;
        rdio = getRdio();
        return rdio.call('currentUser', function(error, data) {
          if (error) {
            robot.logger.warn("Error: " + error);
            return msg.send("Error: " + error);
          }
          return msg.send("Success: " + ((require('utils')).inspect(data)));
        });
      },
      pause: function() {
        return robot.emit('player:send', 'pause');
      },
      playWhatever: function(msg) {
        var rdio;
        rdio = getRdio();
        return rdio.call('getTopCharts', {
          type: 'Track'
        }, function(error, data) {
          var track;
          if (error) {
            robot.logger.warn("Error: " + error);
            return msg.send("Error: " + error);
          }
          try {
            return track = (JSON.parse(data))[0];
          } catch (e) {
            return track = {
              key: 'a997982'
            };
          } finally {
            robot.emit('player:send', 'play', track);
          }
        });
      }
    };
  };

}).call(this);
